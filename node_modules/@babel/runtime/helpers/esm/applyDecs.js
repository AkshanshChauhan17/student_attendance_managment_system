import _typeof from "./typeof.js";
function old_createMetadataMethodsForProperty(metadataMap, kind, property, decoratorFinishedRef) {
  return {
    getMetadata: function getMetadata(key) {
      old_assertNotFinished(decoratorFinishedRef, "getMetadata"), old_assertMetadataKey(key);
      var metadataForKey = metadataMap[key];
      if (void 0 !== metadataForKey) if (1 === kind) {
        var pub = metadataForKey["public"];
        if (void 0 !== pub) return pub[property];
      } else if (2 === kind) {
        var priv = metadataForKey["private"];
        if (void 0 !== priv) return priv.get(property);
      } else if (Object.hasOwnProperty.call(metadataForKey, "constructor")) return metadataForKey.constructor;
    },
    setMetadata: function setMetadata(key, value) {
      old_assertNotFinished(decoratorFinishedRef, "setMetadata"), old_assertMetadataKey(key);
      var metadataForKey = metadataMap[key];
      if (void 0 === metadataForKey && (metadataForKey = metadataMap[key] = {}), 1 === kind) {
        var pub = metadataForKey["public"];
        void 0 === pub && (pub = metadataForKey["public"] = {}), pub[property] = value;
      } else if (2 === kind) {
        var priv = metadataForKey.priv;
        void 0 === priv && (priv = metadataForKey["private"] = new Map()), priv.set(property, value);
      } else metadataForKey.constructor = value;
    }
  };
}
function old_convertMetadataMapToFinal(obj, metadataMap) {
  var parentMetadataMap = obj[Symbol.metadata || Symbol["for"]("Symbol.metadata")],
    metadataKeys = Object.getOwnPropertySymbols(metadataMap);
  if (0 !== metadataKeys.length) {
    for (var i = 0; i < metadataKeys.length; i++) {
      var key = metadataKeys[i],
        metaForKey = metadataMap[key],
        parentMetaForKey = parentMetadataMap ? parentMetadataMap[key] : null,
        pub = metaForKey["public"],
        parentPub = parentMetaForKey ? parentMetaForKey["public"] : null;
      pub && parentPub && Object.setPrototypeOf(pub, parentPub);
      var priv = metaForKey["private"];
      if (priv) {
        var privArr = Array.from(priv.values()),
          parentPriv = parentMetaForKey ? parentMetaForKey["private"] : null;
        parentPriv && (privArr = privArr.concat(parentPriv)), metaForKey["private"] = privArr;
      }
      parentMetaForKey && Object.setPrototypeOf(metaForKey, parentMetaForKey);
    }
    parentMetadataMap && Object.setPrototypeOf(metadataMap, parentMetadataMap), obj[Symbol.metadata || Symbol["for"]("Symbol.metadata")] = metadataMap;
  }
}
function old_createAddInitializerMethod(initializers, decoratorFinishedRef) {
  return function (initializer) {
    old_assertNotFinished(decoratorFinishedRef, "addInitializer"), old_assertCallable(initializer, "An initializer"), initializers.push(initializer);
  };
}
function old_memberDec(dec, name, desc, metadataMap, initializers, kind, isStatic, isPrivate, value) {
  var kindStr;
  switch (kind) {
    case 1:
      kindStr = "accessor";
      break;
    case 2:
      kindStr = "method";
      break;
    case 3:
      kindStr = "getter";
      break;
    case 4:
      kindStr = "setter";
      break;
    default:
      kindStr = "field";
  }
  var metadataKind,
    metadataName,
    ctx = {
      kind: kindStr,
      name: isPrivate ? "#" + name : name,
      isStatic: isStatic,
      isPrivate: isPrivate
    },
    decoratorFinishedRef = {
      v: !1
    };
  if (0 !== kind && (ctx.addInitializer = old_createAddInitializerMethod(initializers, decoratorFinishedRef)), isPrivate) {
    metadataKind = 2, metadataName = Symbol(name);
    var access = {};
    0 === kind ? (access.get = desc.get, access.set = desc.set) : 2 === kind ? access.get = function () {
      return desc.value;
    } : (1 !== kind && 3 !== kind || (access.get = function () {
      return desc.get.call(this);
    }), 1 !== kind && 4 !== kind || (access.set = function (v) {
      desc.set.call(this, v);
    })), ctx.access = access;
  } else metadataKind = 1, metadataName = name;
  try {
    return dec(value, Object.assign(ctx